{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0f6a85cf\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chatbox-container\"\n};\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Chat Bot\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  id: \"chatId\",\n  class: \"messageBox mt-8\"\n};\nconst _hoisted_5 = {\n  class: \"inputContainer\"\n};\nconst _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(message.from == 'user' ? 'messageFromUser' : 'messageFromChat')\n    }, [_createElementVNode(\"div\", {\n      class: _normalizeClass(message.from == 'user' ? 'userMessageWrapper' : 'chatMessageWrapper')\n    }, [_createElementVNode(\"div\", {\n      class: _normalizeClass(message.from == 'user' ? 'userMessageContent' : 'chatMessageContent')\n    }, _toDisplayString(message.data), 3 /* TEXT, CLASS */), _createCommentVNode(\" <div :class=\\\"inline-but\\\" v-for=\\\"(option, j) in message.options\\\" :key=\\\"j\\\">\\r\\n          <button @click=\\\"sendMessage(j,option)\\\">{{ option }}</button>\\r\\n        </div> \")], 2 /* CLASS */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.buttons, (option, j) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: j\n    }, [_createElementVNode(\"button\", {\n      class: \"btn secondary\",\n      onClick: $event => $options.sendMessage(j, option)\n    }, _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_6)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" <div class=\\\"inputContainer\\\">\\r\\n  <input\\r\\n    v-model=\\\"currentMessage\\\"\\r\\n    type=\\\"text\\\"\\r\\n    class=\\\"messageInput\\\"\\r\\n    placeholder=\\\"Respuesta...\\\"\\r\\n  />\\r\\n  <button\\r\\n    @click=\\\"sendMessage(currentMessage)\\\"\\r\\n    class=\\\"askButton\\\"\\r\\n  >\\r\\n    Enviar\\r\\n  </button>\\r\\n</div> \")])]);\n}","map":{"version":3,"names":["class","_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$data","messages","message","index","_normalizeClass","from","data","_createCommentVNode","_hoisted_5","buttons","option","j","key","onClick","$event","$options","sendMessage","_hoisted_6"],"sources":["C:\\Users\\d.a.fernandez.rosell\\OneDrive - Accenture\\Desktop\\Puebas\\chatbot\\src\\components\\ChatBot.vue"],"sourcesContent":["\r\n<template>\r\n  <div class=\"chatbox-container\">\r\n    <div class=\"container\">\r\n      <h1>Chat Bot</h1>\r\n      <div id=\"chatId\" class=\"messageBox mt-8\">\r\n        <template v-for=\"(message, index) in messages\" :key=\"index\">\r\n          <div :class=\"message.from == 'user' ? 'messageFromUser' : 'messageFromChat'\">\r\n            <div :class=\"message.from == 'user' ? 'userMessageWrapper' : 'chatMessageWrapper'\">\r\n              <div :class=\"message.from == 'user' ? 'userMessageContent' : 'chatMessageContent'\">{{ message.data }}\r\n              </div>\r\n              <!-- <div :class=\"inline-but\" v-for=\"(option, j) in message.options\" :key=\"j\">\r\n          <button @click=\"sendMessage(j,option)\">{{ option }}</button>\r\n        </div> -->\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </div>\r\n      <div class=\"inputContainer\">\r\n        <div v-for=\"(option, j) in buttons\" :key=\"j\">\r\n          <button class=\"btn secondary\" @click=\"sendMessage(j, option)\">{{ option }}</button>\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"inputContainer\">\r\n  <input\r\n    v-model=\"currentMessage\"\r\n    type=\"text\"\r\n    class=\"messageInput\"\r\n    placeholder=\"Respuesta...\"\r\n  />\r\n  <button\r\n    @click=\"sendMessage(currentMessage)\"\r\n    class=\"askButton\"\r\n  >\r\n    Enviar\r\n  </button>\r\n</div> -->\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n\r\n<script>\r\nimport axios from 'axios';\r\n// import {ref} from \"vue\";\r\n\r\nexport default {\r\n  name: 'ChatBot',\r\n  data() {\r\n    return {\r\n      currentMessage: '',\r\n      messages: [],\r\n      buttons: []\r\n    }\r\n  },\r\n  methods: {\r\n    async sendMessage(optionNumber, optionDescription) {\r\n\r\n      this.messages.push({\r\n        from: 'user',\r\n        data: optionDescription,\r\n      });\r\n      this.messages.push({\r\n        from: 'chat',\r\n        data: '...',\r\n        options: ''\r\n      });\r\n      await axios\r\n        .post('https://typical-verdant-leotard.glitch.me/sendSelection', {\r\n          respuesta: optionNumber,\r\n        })\r\n        .then((response) => {\r\n          this.messages.pop();\r\n          this.messages.push({\r\n            from: 'chat',\r\n            data: response.data.description,\r\n            options: response.data.options\r\n          });\r\n          this.buttons = response.data.options;\r\n          this.messages[0].options = [];\r\n\r\n          var objDiv = document.getElementById(\"chatId\");\r\n          console.log(\"1: \" + objDiv.scrollTop + \" 2: \" + objDiv.scrollHeight)\r\n\r\n          objDiv.scrollTop = objDiv.scrollHeight;\r\n          // $(\"#chatId\").animate({ scrollTop: $('#chatId').prop(\"scrollHeight\")}, 1000);\r\n        });\r\n\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    axios.get('https://typical-verdant-leotard.glitch.me/getData', {\r\n      // respuesta: message,\r\n    })\r\n      .then((response) => {\r\n        this.messages.push({\r\n          from: 'chat',\r\n          data: response.data.description,\r\n          options: response.data.options\r\n        });\r\n        this.buttons = response.data.options;\r\n      })\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap');\r\n\r\n.chatbox-container {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 1000;\r\n}\r\n\r\n.container {\r\n  width: 360px;\r\n  height: 600px;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nh1 {\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  text-align: center;\r\n  color: #222;\r\n  padding: 16px;\r\n  margin: 0;\r\n  background-color: #f7f7f7;\r\n  border-bottom: 1px solid #e7e7e7;\r\n}\r\n\r\n.btn {\r\n  border: none;\r\n  color: black;\r\n  padding: 14px 24px;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  /* margin:10px 10px 30px 10px; */\r\n}\r\n\r\n.primary {\r\n  background-color: white;\r\n  border: 2px solid #007bff;\r\n}\r\n\r\n.primary:hover {\r\n  background: #0b7dda;\r\n  color: white;\r\n}\r\n\r\n.secondary {\r\n  background-color: white;\r\n  border: 2px solid #e7e7e7;\r\n}\r\n\r\n.secondary:hover {\r\n  background: #ddd;\r\n  color: white;\r\n}\r\n\r\n.inline-but {\r\n  display: inline-block;\r\n}\r\n\r\n.messageBox {\r\n  padding: 16px;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.messageFromUser,\r\n.messageFromChat {\r\n  display: flex;\r\n}\r\n\r\n\r\n\r\n.messageBox {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n  padding: 0 16px;\r\n  border-top: 1px solid #f0f0f0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  flex-grow: 1;\r\n}\r\n\r\n.messageFromUser,\r\n.messageFromChat {\r\n  display: flex;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.userMessageWrapper,\r\n.chatMessageWrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.userMessageWrapper {\r\n  align-self: flex-end;\r\n}\r\n\r\n.chatMessageWrapper {\r\n  align-self: flex-start;\r\n}\r\n\r\n.userMessageContent,\r\n.chatMessageContent {\r\n  max-width: 60%;\r\n  padding: 8px 12px;\r\n  border-radius: 18px;\r\n  margin-bottom: 2px;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n}\r\n\r\n.userMessageContent {\r\n  background-color: #1877F2;\r\n  color: white;\r\n  border-top-left-radius: 0;\r\n}\r\n\r\n.chatMessageContent {\r\n  background-color: #EDEDED;\r\n  color: #222;\r\n  border-top-right-radius: 0;\r\n}\r\n\r\n.userMessageTimestamp,\r\n.chatMessageTimestamp {\r\n  font-size: 10px;\r\n  color: #999;\r\n  margin-top: 2px;\r\n}\r\n\r\n.userMessageTimestamp {\r\n  align-self: flex-end;\r\n}\r\n\r\n.chatMessageTimestamp {\r\n  align-self: flex-start;\r\n}\r\n\r\n.inputContainer {\r\n  flex-direction: row;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #f0f0f0;\r\n  flex-wrap: wrap;\r\n  /* min-height: 90px; */\r\n}\r\n\r\n\r\n.messageInput {\r\n  flex-grow: 1;\r\n  border: none;\r\n  outline: none;\r\n  padding: 12px;\r\n  font-size: 16px;\r\n  background-color: white;\r\n  border-radius: 24px;\r\n  margin-right: 8px;\r\n}\r\n\r\n.askButton {\r\n  background-color: #1877F2;\r\n  color: white;\r\n  font-size: 16px;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-radius: 24px;\r\n  transition: background-color 0.3s ease-in-out;\r\n}\r\n\r\n.askButton:hover {\r\n  background-color: #145CB3;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .container {\r\n    width: 100%;\r\n    max-width: none;\r\n    border-radius: 0;\r\n  }\r\n}\r\n\r\n.chatbox-container {\r\n  position: fixed;\r\n  /* bottom: 24px;\r\n  right: 24px; */\r\n  z-index: 1000;\r\n}\r\n\r\n\r\n.messageBox {\r\n  padding: 16px;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.messageFromUser,\r\n.messageFromChat {\r\n  display: flex;\r\n}</style>"],"mappings":";;;EAEOA,KAAK,EAAC;AAAmB;;EACvBA,KAAK,EAAC;AAAW;gEACpBC,mBAAA,CAAiB,YAAb,UAAQ;;EACPC,EAAE,EAAC,QAAQ;EAACF,KAAK,EAAC;;;EAalBA,KAAK,EAAC;AAAgB;;;uBAhB/BG,mBAAA,CAqCM,OArCNC,UAqCM,GApCJH,mBAAA,CAkCM,OAlCNI,UAkCM,GAjCJC,UAAiB,EACjBL,mBAAA,CAYM,OAZNM,UAYM,I,kBAXJJ,mBAAA,CAUWK,SAAA,QAAAC,WAAA,CAV0BC,KAAA,CAAAC,QAAQ,GAA3BC,OAAO,EAAEC,KAAK;yBAC9BV,mBAAA,CAQM;WAT6CU,KAAK;MAClDb,KAAK,EAAAc,eAAA,CAAEF,OAAO,CAACG,IAAI;QACvBd,mBAAA,CAMM;MANAD,KAAK,EAAAc,eAAA,CAAEF,OAAO,CAACG,IAAI;QACvBd,mBAAA,CACM;MADAD,KAAK,EAAAc,eAAA,CAAEF,OAAO,CAACG,IAAI;wBAA6DH,OAAO,CAACI,IAAI,yBAElGC,mBAAA,mLAEI,C;oCAKZhB,mBAAA,CAIM,OAJNiB,UAIM,I,kBAHJf,mBAAA,CAEMK,SAAA,QAAAC,WAAA,CAFqBC,KAAA,CAAAS,OAAO,GAArBC,MAAM,EAAEC,CAAC;yBAAtBlB,mBAAA,CAEM;MAF+BmB,GAAG,EAAED;IAAC,IACzCpB,mBAAA,CAAmF;MAA3ED,KAAK,EAAC,eAAe;MAAEuB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW,CAACL,CAAC,EAAED,MAAM;wBAAMA,MAAM,wBAAAO,UAAA,E;oCAG3EV,mBAAA,qTAaI,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}